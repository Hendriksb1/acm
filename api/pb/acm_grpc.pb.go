// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: acm.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessControlManagerClient is the client API for AccessControlManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessControlManagerClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	DeleteUserByChipCardId(ctx context.Context, in *DeleteUserByChipCardIdRequest, opts ...grpc.CallOption) (*DeleteUserByChipCardIdResponse, error)
	CheckAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*CheckAccessResponse, error)
}

type accessControlManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessControlManagerClient(cc grpc.ClientConnInterface) AccessControlManagerClient {
	return &accessControlManagerClient{cc}
}

func (c *accessControlManagerClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/api.AccessControlManager/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) DeleteUserByChipCardId(ctx context.Context, in *DeleteUserByChipCardIdRequest, opts ...grpc.CallOption) (*DeleteUserByChipCardIdResponse, error) {
	out := new(DeleteUserByChipCardIdResponse)
	err := c.cc.Invoke(ctx, "/api.AccessControlManager/DeleteUserByChipCardId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlManagerClient) CheckAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*CheckAccessResponse, error) {
	out := new(CheckAccessResponse)
	err := c.cc.Invoke(ctx, "/api.AccessControlManager/CheckAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessControlManagerServer is the server API for AccessControlManager service.
// All implementations must embed UnimplementedAccessControlManagerServer
// for forward compatibility
type AccessControlManagerServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	DeleteUserByChipCardId(context.Context, *DeleteUserByChipCardIdRequest) (*DeleteUserByChipCardIdResponse, error)
	CheckAccess(context.Context, *CheckAccessRequest) (*CheckAccessResponse, error)
	mustEmbedUnimplementedAccessControlManagerServer()
}

// UnimplementedAccessControlManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAccessControlManagerServer struct {
}

func (UnimplementedAccessControlManagerServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedAccessControlManagerServer) DeleteUserByChipCardId(context.Context, *DeleteUserByChipCardIdRequest) (*DeleteUserByChipCardIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByChipCardId not implemented")
}
func (UnimplementedAccessControlManagerServer) CheckAccess(context.Context, *CheckAccessRequest) (*CheckAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccess not implemented")
}
func (UnimplementedAccessControlManagerServer) mustEmbedUnimplementedAccessControlManagerServer() {}

// UnsafeAccessControlManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessControlManagerServer will
// result in compilation errors.
type UnsafeAccessControlManagerServer interface {
	mustEmbedUnimplementedAccessControlManagerServer()
}

func RegisterAccessControlManagerServer(s grpc.ServiceRegistrar, srv AccessControlManagerServer) {
	s.RegisterService(&AccessControlManager_ServiceDesc, srv)
}

func _AccessControlManager_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AccessControlManager/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_DeleteUserByChipCardId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserByChipCardIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).DeleteUserByChipCardId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AccessControlManager/DeleteUserByChipCardId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).DeleteUserByChipCardId(ctx, req.(*DeleteUserByChipCardIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControlManager_CheckAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlManagerServer).CheckAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AccessControlManager/CheckAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlManagerServer).CheckAccess(ctx, req.(*CheckAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessControlManager_ServiceDesc is the grpc.ServiceDesc for AccessControlManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessControlManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AccessControlManager",
	HandlerType: (*AccessControlManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _AccessControlManager_AddUser_Handler,
		},
		{
			MethodName: "DeleteUserByChipCardId",
			Handler:    _AccessControlManager_DeleteUserByChipCardId_Handler,
		},
		{
			MethodName: "CheckAccess",
			Handler:    _AccessControlManager_CheckAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acm.proto",
}
